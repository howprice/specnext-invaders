; http://www.cpcwiki.eu/index.php/Datasheet_AY-8913
; The AY-3-8912 Programmable Sound Generator was first featured in the 128K Spectrums.
; Unlike the Beeper, the AY-3 can continue to produce sound independently of the CPU.
; It has three channel output with 4-bit amplitude (16 levels of loudness)
; - 3 Tone Generators produce the basic square wave tone frequencies for each channel (A,B,C)
; - Noise Generator produces a frequency modulated pseudo random pulse width square wave output.
; - Mixers combine the outputs of the Tone Generators and the Noise Generator. One for each channel (A,B,C)
; - Amplitude Control provides the D/A Converters with either a fixed or variable amplitude pattern. The 
;   fixed amplitude is under direct CPU control; the variable amplitude is accomplished by using, the output
;   of the Envelope Generator.
; - Envelope Generator produces an evelope pattern which can be used to amplitude modulate the output of each Mixer.
; - D/A Converters the three D/A Converters each produce up to a 16 level output signal as determined by
;   the Amplitude Control.
;
; The AY-3 has 16 registers:
;
; Register   Function
; 0          Channel A fine Tone Period (8-bit)
; 1          Channel A coarse Tone Period (4-bit)
; 2          Channel B fine Tone Period (8-bit)
; 3          Channel B coarse Tone Period (4-bit)
; 4          Channel C fine Tone Period (8-bit)
; 5          Channel C coarse Tone Period (4-bit)
; 6          Noise Period (5 bits, max value $1F)
; 7          Tone enable flags a.k.a. "Mixer flags" 
;            Bits 0-2 enable tone on channels A, B, C respectively, but are inverted - 0 is enabled. 
;            Bits 3-5 enable noise on A, B, C are are likewise inverted.
; 8          Channel A Amplitude. 
;            If bit 4 is 0, bits 0-3 set the fixed amplitude which is used. 
;            If bit 4 is 1, the Envelope Generator is used instead, and bits 0-3 are ignored.
; 9          Channel B Amplitude, same as above.
; 10         Channel C Amplitude, same as above.
; 11         Envelope Period fine (8 bits)
; 12         Envelope Period coarse (b bits)
; 13         Envelope Shape/Cycle
;            Bits 0-3 alter the behavior of the envelope generator:
;              Bit 0: "Hold" If 1 the envelope generator performs one cycle then holds at the end value. 
;                            If 0, it cycles continuously.
;              Bit 1: "Alternate" If 1 the envelope generator alters direction after each cycle. 
;                                 If 0, it resets after each cycle. If Hold is set, this instead chooses if 
;                                 the value held is the final value (0) or the initial value (1).
;              Bit 2: "Attack" if 1 the generator counts up. 
;                              If 0 the generator counts down.
;              Bit 3: "Continue" if 0, the envelope generator performs one cycle then drops amplitude to 0 and 
;                                stays there, overriding Hold. 
;                                If 1, Hold is followed.
; 14         Unused
; 15         Unused

AY3_CHANNEL_A_TONE_PERIOD_FINE   EQU $0
AY3_CHANNEL_A_TONE_PERIOD_COARSE EQU $1
AY3_CHANNEL_B_TONE_PERIOD_FINE   EQU $2
AY3_CHANNEL_B_TONE_PERIOD_COARSE EQU $3
AY3_CHANNEL_C_TONE_PERIOD_FINE   EQU $4
AY3_CHANNEL_C_TONE_PERIOD_COARSE EQU $5
AY3_NOISE_PERIOD                 EQU $6
AY3_MIXER                        EQU $7
AY3_CHANNEL_A_AMPLITUDE          EQU $8
AY3_CHANNEL_B_AMPLITUDE          EQU $9
AY3_CHANNEL_C_AMPLITUDE          EQU $a
AY3_ENVELOPE_PERIOD_FINE         EQU $b
AY3_ENVELOPE_PERIOD_COARSE       EQU $c
AY3_ENVELOPE_SHAPE_CYCLE         EQU $d

; Calculating Tone Period
; -----------------------
;
; The Datasheet says: "The frequency of each square wave generated by the three Tone Generators (one 
; each for Channels A,B and C) is obtained in the PSG by first counting down the input clock by 16, 
; then by furthur counting down the result by the programmed 12-bit Tone Period value."
; "Counting down" means dividing, so this means:
;
;   Tone frequency = (AY clock frequency) / (16 * Tone Period)
; 
; where for the ZX Spectrum the AY clock frequncy is 1.7735MHz. So to calculate the Tone Period for 
; a given frequency:
;
;   Tone Period = (AY clock frequency) / (16 * tone frequency)
;
; Unfortunately the assembler cannot be used for floating point calculations but we can precalculate the 
; AY clock frequency / 16 = 1.7735MHz / 16 = 1773500 Hz / 16 = 110844
;
; So TP = 110844 / F
; 
; e.g. Middle C (aka C4),  Frequency = 261.63Hz  Tone Period = 110844 / 261.63 = 423.666 = 424 = $1a8

;
; Turbo Sound Next
; ----------------
;
; Turbo Sound Next is the audio system integrated on the Spectrum Next. It features 
; 3 AY-3-8912 sound chips as used in the Spectrum 128K.
; https://wiki.specnext.dev/Turbo_Sound_Next
; https://wiki.specnext.dev/Turbo_Sound_Next_Control
; https://wiki.specnext.dev/Sound_Chip_Register_Write
;
; http://www.breakintoprogram.co.uk/computers/zx-spectrum/sound
;
