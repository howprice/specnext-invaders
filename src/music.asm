
; generated by ay3_tone_period.py
; Reference tone: A4 = 440Hz
TONE_PERIOD_C0        EQU  $1a7b  ; C0  = 16.35Hz
TONE_PERIOD_C_SHARP0  EQU  $18fe  ; C#0 = 17.32Hz
TONE_PERIOD_D0        EQU  $1797  ; D0  = 18.35Hz
TONE_PERIOD_D_SHARP0  EQU  $1644  ; D#0 = 19.45Hz
TONE_PERIOD_E0        EQU  $1504  ; E0  = 20.60Hz
TONE_PERIOD_F0        EQU  $13d6  ; F0  = 21.83Hz
TONE_PERIOD_F_SHARP0  EQU  $12b9  ; F#0 = 23.12Hz
TONE_PERIOD_G0        EQU  $11ac  ; G0  = 24.50Hz
TONE_PERIOD_G_SHARP0  EQU  $10ae  ; G#0 = 25.96Hz
TONE_PERIOD_A0        EQU  $0fbf  ; A0  = 27.50Hz
TONE_PERIOD_A_SHARP0  EQU  $0edc  ; A#0 = 29.14Hz
TONE_PERIOD_B0        EQU  $0e07  ; B0  = 30.87Hz
TONE_PERIOD_C1        EQU  $0d3d  ; C1  = 32.70Hz
TONE_PERIOD_C_SHARP1  EQU  $0c7f  ; C#1 = 34.65Hz
TONE_PERIOD_D1        EQU  $0bcc  ; D1  = 36.71Hz
TONE_PERIOD_D_SHARP1  EQU  $0b22  ; D#1 = 38.89Hz
TONE_PERIOD_E1        EQU  $0a82  ; E1  = 41.20Hz
TONE_PERIOD_F1        EQU  $09eb  ; F1  = 43.65Hz
TONE_PERIOD_F_SHARP1  EQU  $095d  ; F#1 = 46.25Hz
TONE_PERIOD_G1        EQU  $08d6  ; G1  = 49.00Hz
TONE_PERIOD_G_SHARP1  EQU  $0857  ; G#1 = 51.91Hz
TONE_PERIOD_A1        EQU  $07df  ; A1  = 55.00Hz
TONE_PERIOD_A_SHARP1  EQU  $076e  ; A#1 = 58.27Hz
TONE_PERIOD_B1        EQU  $0703  ; B1  = 61.74Hz
TONE_PERIOD_C2        EQU  $069f  ; C2  = 65.41Hz
TONE_PERIOD_C_SHARP2  EQU  $0640  ; C#2 = 69.30Hz
TONE_PERIOD_D2        EQU  $05e6  ; D2  = 73.42Hz
TONE_PERIOD_D_SHARP2  EQU  $0591  ; D#2 = 77.78Hz
TONE_PERIOD_E2        EQU  $0541  ; E2  = 82.41Hz
TONE_PERIOD_F2        EQU  $04f6  ; F2  = 87.31Hz
TONE_PERIOD_F_SHARP2  EQU  $04ae  ; F#2 = 92.50Hz
TONE_PERIOD_G2        EQU  $046b  ; G2  = 98.00Hz
TONE_PERIOD_G_SHARP2  EQU  $042c  ; G#2 = 103.83Hz
TONE_PERIOD_A2        EQU  $03f0  ; A2  = 110.00Hz
TONE_PERIOD_A_SHARP2  EQU  $03b7  ; A#2 = 116.54Hz
TONE_PERIOD_B2        EQU  $0382  ; B2  = 123.47Hz
TONE_PERIOD_C3        EQU  $034f  ; C3  = 130.81Hz
TONE_PERIOD_C_SHARP3  EQU  $0320  ; C#3 = 138.59Hz
TONE_PERIOD_D3        EQU  $02f3  ; D3  = 146.83Hz
TONE_PERIOD_D_SHARP3  EQU  $02c9  ; D#3 = 155.56Hz
TONE_PERIOD_E3        EQU  $02a1  ; E3  = 164.81Hz
TONE_PERIOD_F3        EQU  $027b  ; F3  = 174.61Hz
TONE_PERIOD_F_SHARP3  EQU  $0257  ; F#3 = 185.00Hz
TONE_PERIOD_G3        EQU  $0236  ; G3  = 196.00Hz
TONE_PERIOD_G_SHARP3  EQU  $0216  ; G#3 = 207.65Hz
TONE_PERIOD_A3        EQU  $01f8  ; A3  = 220.00Hz
TONE_PERIOD_A_SHARP3  EQU  $01dc  ; A#3 = 233.08Hz
TONE_PERIOD_B3        EQU  $01c1  ; B3  = 246.94Hz
TONE_PERIOD_C4        EQU  $01a8  ; C4  = 261.63Hz
TONE_PERIOD_C_SHARP4  EQU  $0190  ; C#4 = 277.18Hz
TONE_PERIOD_D4        EQU  $0179  ; D4  = 293.66Hz
TONE_PERIOD_D_SHARP4  EQU  $0164  ; D#4 = 311.13Hz
TONE_PERIOD_E4        EQU  $0150  ; E4  = 329.63Hz
TONE_PERIOD_F4        EQU  $013d  ; F4  = 349.23Hz
TONE_PERIOD_F_SHARP4  EQU  $012c  ; F#4 = 369.99Hz
TONE_PERIOD_G4        EQU  $011b  ; G4  = 392.00Hz
TONE_PERIOD_G_SHARP4  EQU  $010b  ; G#4 = 415.30Hz
TONE_PERIOD_A4        EQU  $00fc  ; A4  = 440.00Hz
TONE_PERIOD_A_SHARP4  EQU  $00ee  ; A#4 = 466.16Hz
TONE_PERIOD_B4        EQU  $00e0  ; B4  = 493.88Hz
TONE_PERIOD_C5        EQU  $00d4  ; C5  = 523.25Hz
TONE_PERIOD_C_SHARP5  EQU  $00c8  ; C#5 = 554.37Hz
TONE_PERIOD_D5        EQU  $00bd  ; D5  = 587.33Hz
TONE_PERIOD_D_SHARP5  EQU  $00b2  ; D#5 = 622.25Hz
TONE_PERIOD_E5        EQU  $00a8  ; E5  = 659.26Hz
TONE_PERIOD_F5        EQU  $009f  ; F5  = 698.46Hz
TONE_PERIOD_F_SHARP5  EQU  $0096  ; F#5 = 739.99Hz
TONE_PERIOD_G5        EQU  $008d  ; G5  = 783.99Hz
TONE_PERIOD_G_SHARP5  EQU  $0085  ; G#5 = 830.61Hz
TONE_PERIOD_A5        EQU  $007e  ; A5  = 880.00Hz
TONE_PERIOD_A_SHARP5  EQU  $0077  ; A#5 = 932.33Hz
TONE_PERIOD_B5        EQU  $0070  ; B5  = 987.77Hz
TONE_PERIOD_C6        EQU  $006a  ; C6  = 1046.50Hz
TONE_PERIOD_C_SHARP6  EQU  $0064  ; C#6 = 1108.73Hz
TONE_PERIOD_D6        EQU  $005e  ; D6  = 1174.66Hz
TONE_PERIOD_D_SHARP6  EQU  $0059  ; D#6 = 1244.51Hz
TONE_PERIOD_E6        EQU  $0054  ; E6  = 1318.51Hz
TONE_PERIOD_F6        EQU  $004f  ; F6  = 1396.91Hz
TONE_PERIOD_F_SHARP6  EQU  $004b  ; F#6 = 1479.98Hz
TONE_PERIOD_G6        EQU  $0047  ; G6  = 1567.98Hz
TONE_PERIOD_G_SHARP6  EQU  $0043  ; G#6 = 1661.22Hz
TONE_PERIOD_A6        EQU  $003f  ; A6  = 1760.00Hz
TONE_PERIOD_A_SHARP6  EQU  $003b  ; A#6 = 1864.66Hz
TONE_PERIOD_B6        EQU  $0038  ; B6  = 1975.53Hz
TONE_PERIOD_C7        EQU  $0035  ; C7  = 2093.00Hz
TONE_PERIOD_C_SHARP7  EQU  $0032  ; C#7 = 2217.46Hz
TONE_PERIOD_D7        EQU  $002f  ; D7  = 2349.32Hz
TONE_PERIOD_D_SHARP7  EQU  $002d  ; D#7 = 2489.02Hz
TONE_PERIOD_E7        EQU  $002a  ; E7  = 2637.02Hz
TONE_PERIOD_F7        EQU  $0028  ; F7  = 2793.83Hz
TONE_PERIOD_F_SHARP7  EQU  $0025  ; F#7 = 2959.96Hz
TONE_PERIOD_G7        EQU  $0023  ; G7  = 3135.96Hz
TONE_PERIOD_G_SHARP7  EQU  $0021  ; G#7 = 3322.44Hz
TONE_PERIOD_A7        EQU  $001f  ; A7  = 3520.00Hz
TONE_PERIOD_A_SHARP7  EQU  $001e  ; A#7 = 3729.31Hz
TONE_PERIOD_B7        EQU  $001c  ; B7  = 3951.07Hz
TONE_PERIOD_C8        EQU  $001a  ; C8  = 4186.01Hz
TONE_PERIOD_C_SHARP8  EQU  $0019  ; C#8 = 4434.92Hz
TONE_PERIOD_D8        EQU  $0018  ; D8  = 4698.64Hz
TONE_PERIOD_D_SHARP8  EQU  $0016  ; D#8 = 4978.03Hz
TONE_PERIOD_E8        EQU  $0015  ; E8  = 5274.04Hz
TONE_PERIOD_F8        EQU  $0014  ; F8  = 5587.65Hz
TONE_PERIOD_F_SHARP8  EQU  $0013  ; F#8 = 5919.91Hz
TONE_PERIOD_G8        EQU  $0012  ; G8  = 6271.93Hz
TONE_PERIOD_G_SHARP8  EQU  $0011  ; G#8 = 6644.88Hz
TONE_PERIOD_A8        EQU  $0010  ; A8  = 7040.00Hz
TONE_PERIOD_A_SHARP8  EQU  $000f  ; A#8 = 7458.62Hz
TONE_PERIOD_B8        EQU  $000e  ; B8  = 7902.13Hz

InitMusic:

        ; Select AY0 (first AY chip) left and right audio
        ld bc,PORT_TURBO_SOUND_NEXT_CONTROL
        ld a,%11111111
        out (c),a

        ; Enable noise and tone for channel A
        ld bc,PORT_TURBO_SOUND_NEXT_CONTROL
        ld a,AY3_MIXER
        out (c),a                               ; select register
        ld bc,PORT_SOUND_CHIP_REGISTER_WRITE
        ld a,%110110    ; enable noise and tone on channel A (n.b. active low)
        out (c),a       ; write register value

        ret

StartMusic:
        ld hl,musicActive
        ld (hl),$01
        ret

StopMusic
        ld hl,musicActive
        ld (hl),$00

        jp stopNote             ; jp instead of call xxxx : ret saves 1 byte and 17 T-states

musicActive DB $00

;
; Like a Pattern in a SoundTracker mod. A pattern is a set of rows which are played sequentially.
;
pattern DW TONE_PERIOD_C_SHARP2
        DW TONE_PERIOD_B1
        DW TONE_PERIOD_A_SHARP1
        DW TONE_PERIOD_A1
PATTERN_LENGTH EQU ($ - pattern) / 2

; One tick per frame so this is frames per row. "Speed" in mod parlance. Must be non zero.
ticksPerRow DB INVADER_COUNT
MIN_TICKS_PER_ROW EQU 5

TICKS_PER_NOTE EQU 4    ; invaders arcade samples are about 70ms long which is about 5 60Hz frames
        ASSERT TICKS_PER_NOTE <= MIN_TICKS_PER_ROW ; logic requires this

rowIndex  DB $00        ; which row in the pattern is currently playing
tickIndex DB $00        ; 0 when the tone in the row starts playing, advances by 1 each frame after

;
; Call this once per frame, ideally from the ULA or Line Interrupt
; Modifies: AF, BC, D, HL
;
TickMusic:

        ld a,(musicActive)
        and a                   ; set zero flag if musicActive is zero
        ret z

        ; Speed up music as invaders are destroyed, up to a limit
        ld a,(liveInvaderCount)
        cp MIN_TICKS_PER_ROW            ; ticksPerRow - minTicksPerRow
        jr nc,1F                        ; jump forward to temp label 1
        ld a,MIN_TICKS_PER_ROW
1       ld (ticksPerRow),a

        ; play a note on the first tick of the sequence
        ld a,(tickIndex)
        and a                   ; set zero flag if tickIndex is zero
        jp nz,.advanceTick

        call playNote

.advanceTick
        ld a,(tickIndex)
        inc a

        cp TICKS_PER_NOTE
        jp nz,2F                ; jump forward to temp label 2

        ld d,a                  ; D <- tickIndex (subroutine modifies A)
        call stopNote
        ld a,d                  ; D <- tickIndex

2       ld hl,ticksPerRow
        cp (hl)                 ; Set carry flag from tickIndex - ticksPerRow i.e. NC when finished
        jp nc,.advanceRow
        
        ; still ticking through this row
        ld (tickIndex),a
        ret

.advanceRow
        ld a,0          ; tickIndex <- 0
        ld (tickIndex),a
        
        ; advance state next row in pattern
        ld a,(rowIndex)         ; A <- rowIndex
        inc a                   ; rowIndex++
        cp PATTERN_LENGTH       ; set zero flag if reached end of pattern
        jp z,.nextPattern       ; jump if rowIndex < PATTERN_LENGTH
        ld (rowIndex),a         ; store rowIndex
        ret

.nextPattern   
        ; We only have a single pattern for now, so just loop back to first row in the pattern
        xor a   ; A <- 0       
        ld (rowIndex),a

        ret
;
; Plays a note on channel A
; Modifies: A, BC, HL
;
playNote:

        ; Select AY0 (first AY chip) left and right audio
        ld bc,PORT_TURBO_SOUND_NEXT_CONTROL
        ld a,%11111111
        out (c),a

        ; load tone period
        ld hl,pattern   ; HL = &row[0]
        ld a,(rowIndex) ; A <- offset in rows
        add a,a         ; A <- offset in bytes (each row is one word)
        add hl,a        ; HL <- &row[rowIndex] == &(Tone Period LSB)

        ; Channel A fine Tone Period (8-bit)
        ld bc,PORT_TURBO_SOUND_NEXT_CONTROL
        ld a,AY3_CHANNEL_A_TONE_PERIOD_FINE     ; register index/address
        out (c),a                               ; select register n.b. port number is given in 16-bit register BC even though the instruction refers only to C
        
        ld bc,PORT_SOUND_CHIP_REGISTER_WRITE
        ld a,(hl)                               ; A <- Tone Period LSB
        out (c),a                               ; write AY3 register value

        inc hl                                  ; HL <- &tonePeriod MSB

        ; Channel A coarse Tone Period (4-bit)
        ld bc,PORT_TURBO_SOUND_NEXT_CONTROL
        ld a,AY3_CHANNEL_A_TONE_PERIOD_COARSE
        out (c),a                               ; select register

        ld bc,PORT_SOUND_CHIP_REGISTER_WRITE
        ld a,(hl)                               ; A <- 4-bit coarse tone period
        out (c),a                               ; write AY3 register value

        ; Channel A Amplitude
        ld bc,PORT_TURBO_SOUND_NEXT_CONTROL
        ld a,AY3_CHANNEL_A_AMPLITUDE
        out (c),a                               ; select register 0 n.b. port number is given in 16-bit register BC even though the instruction refers only to C
        
        ld bc,PORT_SOUND_CHIP_REGISTER_WRITE
        ld a,$f                                 ; maximum amplitude
        out (c),a                               ; write AY3 register value

        ret

;
; Stops the note from playing by setting channel A amplitude to zero
; Modifies: A, BC
;
stopNote:

        ; Select AY0 (first AY chip) left and right audio
        ld bc,PORT_TURBO_SOUND_NEXT_CONTROL
        ld a,%11111111
        out (c),a

        ld bc,PORT_TURBO_SOUND_NEXT_CONTROL
        ld a,AY3_CHANNEL_A_AMPLITUDE
        out (c),a                               ; select register
        ld bc,PORT_SOUND_CHIP_REGISTER_WRITE
        ld a,$0                                 ; zero amplitude
        out (c),a                               ; write to register

        ret
